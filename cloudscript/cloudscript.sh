#!/usr/bin/env bash 

set -x

function dnsCheck () {

  # -- set hostname on vm
  hostname "$HOSTNAME.us.deloitte.com"

  # -- delcare settings 
  str=$'[main]\ndns=none'
  dns=$'# Generated by NetworkManager\nsearch us.deloitte.com\nnameserver 10.218.0.146\nnameserver 10.218.32.155\nnameserver 10.218.0.147\nnameserver 10.218.32.135'
  puppet_conf=$'[main]\nserver = uspup-cm.us.deloitte.com'

  # -- check for RHEL /etc/resolv.conf reboot clearning DNS
  if [ -d /etc/NetworkManager/conf.d ]; then
    echo "$str" > /etc/NetworkManager/conf.d/no-dns.conf
  fi

  # -- create the custom facts
  mkdir -p /opt/puppetlabs/facter/facts.d/
  touch /opt/puppetlabs/facter/facts.d/deloitte.yaml
  echo -e "deloitte_greenfield : true\ngreenfield : true" > /opt/puppetlabs/facter/facts.d/deloitte.yaml

  ###
  echo "$dns" > /etc/resolv.conf

  # -- check if DNS is avail 
  while ! ping -c1 10.218.0.147 &>/dev/null
          do echo "Ping Fail for east DNS 10.218.0.147 - `date`"
  done
  echo "DNS servers Found - 10.218.0.147 `date`"

  # -- check if DNS is avail
  while ! ping -c1 10.218.32.135 &>/dev/null
          do echo "Ping Fail for west DNS 10.218.32.135 - `date`"
  done
  echo "DNS servers Found - 10.218.32.135 `date`"

  sleep 10 

  echo ping test ---
  ping -c 3 google.com
  echo ping test completed ---
}

function custom_facts () {

  instance=$(echo $HOSTNAME)
  zone=$(gcloud compute instances list |grep $HOSTNAME| awk '{print $2}')
  project=($(gcloud config get-value project))
  gcloud config set project $project
  function=$(echo $project |awk -F- '{print $4}')
  environment=$(echo $project |awk -F- '{print $6}')
  gcloud compute instances add-metadata ${instance} --zone $zone \
      --metadata function=${function},environment=${environment}
}

function osCheckVersion () {
  # -- install cloud sdk for suse linux OS
  ostype=$(cat /etc/os-release |grep SLES |cut -d '"' -f2)
  if [[ "$ostype" = 'SLES' ]]; then

    curl https://sdk.cloud.google.com > install.sh
    bash install.sh --disable-prompts --install-dir=/usr/bin
    ln -s /usr/bin/google-cloud-sdk/bin/gcloud /usr/bin/gcloud
    gcloud config list
  fi
}


function addStaticSG () {

  # -- var for file location
  sg_file_location="/etc/login.group.allowed"

  # -- create /etc/login.group.allowed !exist do
  if [ ! -e "$sg_file_location" ]; then
    touch "$sg_file_location"
    ls -al "$sg_file_location"
  fi

  # -- defind our SG's, if you need more sg's add here
  declare -a sg_names=("sg-us_gcp_ame_ena_gcp_admins")

  # -- if file exists update with SG
  if [ -e "$sg_file_location" ]; then
  for sg in ${sg_names[@]};
    do
    grep -qF "$sg" "$sg_file_location" || echo "$sg" | sudo tee --append "$sg_file_location"
  done
  fi
}


function addcbcapSG () {

  if [[ $(gcloud projects describe us-gcp-ame-its-gpt-npd-1 |grep contact |egrep -i "wlove|dyang|cpendelton") ]]; then
    file="/etc/login.group.allowed"
    cbcap_sg="sg-us_cbcap_cloud_devops_admin"
    echo "$cbcap_sg" | sudo tee -a "$file"
  fi
}



function addProjectSG () {
  # -- begin to apply project named SG's

  file="/etc/login.group.allowed"

  # -- collect a clean project name
  project=($(gcloud config get-value project))

  # -- format and build new array
  for each in "${project[@]}";
  do
          projects_formatted+=($(echo "${each}" | tr '-' '_'))
  done

  # -- print new array
  for i in "${projects_formatted[@]}";
  do
    grep -qF sg-"${projects_formatted[$i]}"_devops "$file" || echo sg-"${projects_formatted[$i]}"_devops | sudo tee -a "$file"
  done


  echo ----  SG adds are completed ----
  sleep 5
}

function elevated () {
  project=($(gcloud config get-value project))
  project_name=$(echo "${project}" | tr '-' '_')
elevatedGCP=$(cat <<-EOF
{
  "elevated_groups": {
    "sudo_groups": [
      "%sg-us_gcp_ame_ena_gcp_admins",
      "%sg-${project_name}_devops"
    ]
  }
}
EOF
)
  echo -n $elevatedGCP > /opt/puppetlabs/facter/facts.d/elevated_groups.json
}

## --- Puppet Install  ---

function puppetInstall () {
# -- check IF puppet installed 

if ! [ -x "$(command -v puppet)" ]; then

  # -- Ubuntu 18.04 True all other OS
  os_check=$(grep 18.04 /etc/issue.net)
  if [ "$os_check" != "" ]; then
    wget https://apt.puppetlabs.com/puppet5-release-xenial.deb
    dpkg -i puppet5-release-xenial.deb
    apt-get update -y
    apt-get install puppet-agent -y
  else
  #  # -- RHEL && Ubuntu < 18.04
    curl -sS -k https://uspup-cm.us.deloitte.com:8140/packages/current/install.bash -o install.sh
    ps aux |grep -i apt && sleep 20
    bash -x install.sh
  fi

  # -- export PATH to puppet executable
  export PATH=/opt/puppetlabs/bin:$PATH

  # -- update puppet.conf
  echo "$puppet_conf" > /etc/puppetlabs/puppet/puppet.conf

  # -- enable & restart
  /opt/puppetlabs/bin/puppet resource service puppet enable=true
  systemctl restart puppet
fi
}


# -- call functions to apply SG's
dnsCheck
elevated 
osCheckVersion
custom_facts
addStaticSG
addcbcapSG
addProjectSG
puppetInstall
